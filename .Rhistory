rm(list = ls())
require(rmarkdown)
require(tufte)
require(bookdown)
# convert refs to nicer format
require(RefManageR)
refs <- RefManageR::ReadBib("bibliography/MyBibliography.bib")
RefManageR::WriteBib(refs, file = "bibliography/MyModifiedBibliography", biblatex = T)
# gitbook formatted html pages
file.remove("_main.md")
bookdown::render_book("index.Rmd", output_format = bookdown::gitbook(split_by = "chapter", collapse = "section"), new_session = T, clean_envir = T)
rm(list = ls())
require(rmarkdown)
require(tufte)
require(bookdown)
# convert refs to nicer format
require(RefManageR)
refs <- RefManageR::ReadBib("bibliography/MyBibliography.bib")
RefManageR::WriteBib(refs, file = "bibliography/MyModifiedBibliography", biblatex = T)
# gitbook formatted html pages
file.remove("_main.md")
bookdown::render_book("index.Rmd", output_format = bookdown::gitbook(split_by = "chapter", collapse = "section"), new_session = T, clean_envir = T)
rm(list = ls())
require(rmarkdown)
require(tufte)
require(bookdown)
# convert refs to nicer format
require(RefManageR)
refs <- RefManageR::ReadBib("bibliography/MyBibliography.bib")
RefManageR::WriteBib(refs, file = "bibliography/MyModifiedBibliography", biblatex = T)
# gitbook formatted html pages
file.remove("_main.md")
bookdown::render_book("index.Rmd", output_format = bookdown::gitbook(split_by = "chapter", collapse = "section"), new_session = T, clean_envir = T)
rm(list = ls())
require(rmarkdown)
require(tufte)
require(bookdown)
# convert refs to nicer format
require(RefManageR)
refs <- RefManageR::ReadBib("bibliography/MyBibliography.bib")
RefManageR::WriteBib(refs, file = "bibliography/MyModifiedBibliography", biblatex = T)
# gitbook formatted html pages
file.remove("_main.md")
bookdown::render_book("index.Rmd", output_format = bookdown::gitbook(split_by = "chapter", collapse = "section"), new_session = T, clean_envir = T)
# convert refs to nicer format
require(RefManageR)
refs <- RefManageR::ReadBib("bibliography/MyBibliography.bib")
refs <- RefManageR::ReadBib("bibliography/MyBibliography.bib")
RefManageR::WriteBib(refs, file = "bibliography/MyModifiedBibliography", biblatex = T)
# gitbook formatted html pages
file.remove("_main.md")
bookdown::render_book("index.Rmd", output_format = bookdown::gitbook(split_by = "chapter", collapse = "section"), new_session = T, clean_envir = T)
# gitbook formatted html pages
# file.remove("_main.md") # only when requested
bookdown::render_book("index.Rmd", output_format = bookdown::gitbook(split_by = "chapter", collapse = "section"), new_session = T, clean_envir = T)
bookdown::render_book("index.Rmd", output_format = bookdown::tufte_html_book(split_by = "chapter"),
output_dir = "tufte_book", new_session = T, clean_envir = T)
# "normal" pdf
# options(tinytex.verbose = TRUE) # change to TRUE for debugging
bookdown::render_book("index.Rmd", output_format = bookdown::pdf_book(latex_engine = "xelatex"), new_session = T, clean_envir = T)
bookdown::render_book("index.Rmd", output_format = bookdown::tufte_book2(),
output_dir = "tufte_book", new_session = T, clean_envir = T)
# tufte pdf (accepts no more than 2-level sections)
bookdown::render_book("index.Rmd", output_format = bookdown::tufte_book2(),
output_dir = "tufte_book", new_session = T, clean_envir = T)
# tufte pdf (accepts no more than 2-level sections)
bookdown::render_book("index.Rmd", output_format = bookdown::tufte_book2(),
output_dir = "tufte_book", new_session = T, clean_envir = T)
# set chunk options for this Rmd file
knitr::opts_chunk$set(
echo = FALSE,
message = FALSE,
warning = FALSE,
cache = TRUE
)
require(sf)
require(tidyverse)
baseurl = "https://wad.deontwikkelfabriek.nl/geoserver/sovon/ows?"
wfs_request = "service=WFS&version=1.0.0&request=GetFeature&typeName=sovon:koloniebroedvogels"
koloniebroedvogels <- st_read(paste0(baseurl, wfs_request), crs = 4326) %>% st_transform(28992)
land <- read_sf("d:/GIS_DATA/Nederland/administratief/Gemeentegrenzen_2017_zonder_water_gen.shp") %>% st_transform(28992) %>%
summarise()
koloniebroedvogels %>% group_by(jaar, soort) %>%
summarise(sum = sum(n), meanColonySize = mean(n)) %>%
# gather(key = variable, value = value, sum, meansize) %>%
ggplot(aes(jaar, sum)) +
geom_line() +
geom_point(aes(size = meanColonySize), shape = 21, fill = "white") +
# scale_y_log10() +
facet_wrap(~soort, scales = "free", ncol = 3) +
theme_minimal() +
theme(legend.position = "bottom")
koloniebroedvogels %>% group_by(jaar, soort) %>%
summarise(sum = sum(n), meanColonySize = mean(n)) %>%
# gather(key = variable, value = value, sum, meansize) %>%
ggplot(aes(jaar, sum)) +
geom_line() +
geom_point(aes(size = meanColonySize), shape = 21, fill = "white") +
# scale_y_log10() +
facet_wrap(~soort, scales = "free", ncol = 3) +
theme_minimal() +
theme(legend.position = "bottom")
# tufte pdf (accepts no more than 2-level sections)
bookdown::render_book("index.Rmd", output_format = bookdown::tufte_book2(),
output_dir = "tufte_book", new_session = T, clean_envir = T)
# tufte pdf (accepts no more than 2-level sections)
bookdown::render_book("index.Rmd", output_format = bookdown::tufte_book2(),
output_dir = "tufte_book", new_session = T, clean_envir = T)
# tufte pdf (accepts no more than 2-level sections)
bookdown::render_book("index.Rmd", output_format = bookdown::tufte_book2(),
output_dir = "tufte_book", new_session = T, clean_envir = T)
# tufte pdf (accepts no more than 2-level sections)
bookdown::render_book("index.Rmd", output_format = bookdown::tufte_book2(),
output_dir = "tufte_book", new_session = T, clean_envir = T)
# tufte pdf (accepts no more than 2-level sections)
bookdown::render_book("index.Rmd", output_format = bookdown::tufte_book2(),
output_dir = "tufte_book", new_session = T, clean_envir = T)
koloniebroedvogels %>% group_by(jaar, soort) %>%
summarise(sum = sum(n), meanColonySize = mean(n)) %>%
ggplot(aes(jaar, sum)) +
geom_line() +
geom_point(aes(size = meanColonySize), shape = 21, fill = "white") +
facet_grid(.~soort, scales = "free", ncol = 3) +
theme_minimal() +
theme(legend.position = "bottom")
# set chunk options for this Rmd file
knitr::opts_chunk$set(
echo = FALSE,
message = FALSE,
warning = FALSE,
cache = TRUE
)
require(sf)
require(tidyverse)
baseurl = "https://wad.deontwikkelfabriek.nl/geoserver/sovon/ows?"
wfs_request = "service=WFS&version=1.0.0&request=GetFeature&typeName=sovon:koloniebroedvogels"
koloniebroedvogels <- st_read(paste0(baseurl, wfs_request), crs = 4326) %>% st_transform(28992)
land <- read_sf("d:/GIS_DATA/Nederland/administratief/Gemeentegrenzen_2017_zonder_water_gen.shp") %>% st_transform(28992) %>%
summarise()
koloniebroedvogels %>% group_by(jaar, soort) %>%
summarise(sum = sum(n), meanColonySize = mean(n)) %>%
ggplot(aes(jaar, sum)) +
geom_line() +
geom_point(aes(size = meanColonySize), shape = 21, fill = "white") +
facet_grid(.~soort, scales = "free", ncol = 3) +
theme_minimal() +
theme(legend.position = "bottom")
koloniebroedvogels %>% group_by(jaar, soort) %>%
summarise(sum = sum(n), meanColonySize = mean(n)) %>%
ggplot(aes(jaar, sum)) +
geom_line() +
geom_point(aes(size = meanColonySize), shape = 21, fill = "white") +
facet_grid(.~soort, scales = "free") +
theme_minimal() +
theme(legend.position = "bottom")
koloniebroedvogels %>% group_by(jaar, soort) %>%
summarise(sum = sum(n), meanColonySize = mean(n)) %>%
ggplot(aes(jaar, sum)) +
geom_line() +
geom_point(aes(size = meanColonySize), shape = 21, fill = "white") +
facet_grid(soort ~ ., scales = "free") +
theme_minimal() +
theme(legend.position = "bottom")
koloniebroedvogels %>% group_by(jaar, soort) %>%
summarise(sum = sum(n), meanColonySize = mean(n)) %>%
ggplot(aes(jaar, sum)) +
geom_line() +
geom_point(aes(size = meanColonySize), shape = 21, fill = "white") +
facet_grid(. ~ soort, scales = "free") +
theme_minimal() +
theme(legend.position = "bottom")
koloniebroedvogels %>% group_by(jaar, soort) %>%
summarise(sum = sum(n), meanColonySize = mean(n)) %>%
ggplot(aes(jaar, sum)) +
geom_line() +
geom_point(aes(size = meanColonySize), shape = 21, fill = "white") +
facet_grid(. ~ soort, scales = "free") +
theme_minimal() +
theme(legend.position = "bottom")
# tufte pdf (accepts no more than 2-level sections)
bookdown::render_book("index.Rmd", output_format = bookdown::tufte_book2(),
output_dir = "tufte_book", new_session = T, clean_envir = T)
# tufte pdf (accepts no more than 2-level sections)
bookdown::render_book("index.Rmd", output_format = bookdown::tufte_book2(),
output_dir = "tufte_book", new_session = T, clean_envir = T)
# gitbook formatted html pages
# file.remove("_main.md") # only when requested
bookdown::render_book("index.Rmd", output_format = bookdown::gitbook(split_by = "chapter", collapse = "section"), new_session = T, clean_envir = T)
bookdown::render_book("index.Rmd", output_format = bookdown::tufte_html_book(split_by = "chapter"),
output_dir = "tufte_book", new_session = T, clean_envir = T)
# "normal" pdf
# options(tinytex.verbose = TRUE) # change to TRUE for debugging
bookdown::render_book("index.Rmd", output_format = bookdown::pdf_book(latex_engine = "xelatex"), new_session = T, clean_envir = T)
# gitbook formatted html pages
# file.remove("_main.md") # only when requested
bookdown::render_book("index.Rmd", output_format = bookdown::gitbook(split_by = "chapter", collapse = "section"), new_session = T, clean_envir = T)
# gitbook formatted html pages
# file.remove("_main.md") # only when requested
bookdown::render_book("index.Rmd", output_format = bookdown::gitbook(split_by = "chapter"), new_session = T, clean_envir = T)
# gitbook formatted html pages
# file.remove("_main.md") # only when requested
bookdown::render_book("index.Rmd", output_format = bookdown::gitbook(split_by = "chapter"), new_session = T, clean_envir = T)
# gitbook formatted html pages
# file.remove("_main.md") # only when requested
bookdown::render_book("index.Rmd", output_format = bookdown::gitbook(split_by = "section"), new_session = T, clean_envir = T)
# tufte style html pages (accepts no more than 2-level sections)
bookdown::render_book("index.Rmd", output_format = bookdown::tufte_html_book(split_by = "chapter"),
output_dir = "tufte_book", new_session = T, clean_envir = T)
# gitbook formatted html pages
# file.remove("_main.md") # only when requested
bookdown::render_book("index.Rmd", output_format = bookdown::gitbook(split_by = "chapter"), new_session = T, clean_envir = T)
# "normal" pdf
# options(tinytex.verbose = TRUE) # change to TRUE for debugging
bookdown::render_book("index.Rmd", output_format = bookdown::pdf_book(latex_engine = "xelatex"), new_session = T, clean_envir = T)
# tufte pdf (accepts no more than 2-level sections)
bookdown::render_book("index.Rmd", output_format = bookdown::tufte_book2(),
output_dir = "tufte_book", new_session = T, clean_envir = T)
# gitbook formatted html pages
# file.remove("_main.md") # only when requested
bookdown::render_book("index.Rmd", output_format = bookdown::gitbook(split_by = "chapter"), new_session = T, clean_envir = T)
# gitbook formatted html pages
# file.remove("_main.md") # only when requested
bookdown::render_book("index.Rmd", output_format = bookdown::gitbook(split_by = "chapter"), new_session = T, clean_envir = T)
# "normal" pdf
# options(tinytex.verbose = TRUE) # change to TRUE for debugging
bookdown::render_book("index.Rmd", output_format = bookdown::pdf_book(latex_engine = "xelatex"), new_session = T, clean_envir = T)
rm(list = ls())
require(rmarkdown)
require(tufte)
require(bookdown)
# convert refs to nicer format
require(RefManageR)
refs <- RefManageR::ReadBib("bibliography/MyBibliography.bib")
RefManageR::WriteBib(refs, file = "bibliography/MyModifiedBibliography", biblatex = T)
# gitbook formatted html pages
# file.remove("_main.md") # only when requested
bookdown::render_book("index.Rmd", output_format = bookdown::gitbook(split_by = "chapter"), new_session = T, clean_envir = T)
# "normal" pdf
# options(tinytex.verbose = TRUE) # change to TRUE for debugging
bookdown::render_book("index.Rmd", output_format = bookdown::pdf_book(latex_engine = "xelatex"), new_session = T, clean_envir = T)
# Deltares report
bookdown::render_book("index.Rmd", output_format = bookdown::pdf_book(template = "deltares-report-template.tex", latex_engine = "xelatex"), new_session = T, clean_envir = T)
# Deltares report
bookdown::render_book("index.Rmd", output_format = bookdown::pdf_book(template = "deltares-report-template.tex", latex_engine = "xelatex"), new_session = T, clean_envir = T)
# Deltares report
bookdown::render_book("index.Rmd", output_format = bookdown::pdf_book(template = "deltares-report-template.tex", latex_engine = "xelatex"), new_session = T, clean_envir = T)
# Deltares report
bookdown::render_book("index.Rmd", output_format = bookdown::pdf_book(template = "deltares-report-template.tex", latex_engine = "xelatex"), new_session = T, clean_envir = T)
# Deltares report
bookdown::render_book("index.Rmd", output_format = bookdown::pdf_book(template = "deltares-report-template.tex", latex_engine = "xelatex"), new_session = T, clean_envir = T)
# gitbook formatted html pages
file.remove("_main.md") # only when requested
# Deltares report
bookdown::render_book("index.Rmd", output_format = bookdown::pdf_book(template = "deltares-report-template.tex", latex_engine = "xelatex"), new_session = T, clean_envir = T)
# gitbook formatted html pages
file.remove("_main.md") # only when requested
# Deltares report
bookdown::render_book("index.Rmd", output_format = bookdown::pdf_book(template = "deltares-report-template.tex", latex_engine = "xelatex"), new_session = T, clean_envir = T)
# gitbook formatted html pages
file.remove("_main.md") # only when requested
# Deltares report
bookdown::render_book("index.Rmd", output_format = bookdown::pdf_book(template = "deltares-report-template.tex", latex_engine = "xelatex"), new_session = T, clean_envir = T)
# gitbook formatted html pages
file.remove("_main.md") # only when requested
# Deltares report
bookdown::render_book("index.Rmd", output_format = bookdown::pdf_book(template = "deltares-report-template.tex", latex_engine = "xelatex"), new_session = T, clean_envir = T)
shiny::runApp('efvetg')
# Deltares report
bookdown::render_book("index.Rmd", output_format = bookdown::pdf_book(template = "deltares-report-template.tex", latex_engine = "xelatex"), new_session = T, clean_envir = T)
# gitbook formatted html pages
file.remove("_main.md") # only when requested
# Deltares report
bookdown::render_book("index.Rmd", output_format = bookdown::pdf_book(template = "deltares-report-template.tex", latex_engine = "xelatex"), new_session = T, clean_envir = T)
tinytex::tlmgr_update()
tinytex::use_tinytex()
tinytex::tinytex_root()
rm(list = ls())
require(rmarkdown)
require(tufte)
require(bookdown)
# convert refs to nicer format
require(RefManageR)
refs <- RefManageR::ReadBib("bibliography/MyBibliography.bib")
RefManageR::WriteBib(refs, file = "bibliography/MyModifiedBibliography", biblatex = T)
# gitbook formatted html pages
file.remove("_main.md") # only when requested
# Deltares report
bookdown::render_book("index.Rmd", output_format = bookdown::pdf_book(template = "deltares-report-template.tex", latex_engine = "xelatex"), new_session = T, clean_envir = T)
# Deltares report
bookdown::render_book("index.Rmd", output_format = bookdown::pdf_book(template = "deltares-report-template.tex", latex_engine = "xelatex"), new_session = T, clean_envir = T)
file.remove("_main.md") # only when requested
# Deltares report
bookdown::render_book("index.Rmd", output_format = bookdown::pdf_book(template = "deltares-report-template.tex", latex_engine = "xelatex"), new_session = T, clean_envir = T)
# Deltares report
bookdown::render_book("index.Rmd", output_format = bookdown::pdf_book(template = "deltares-report-template.tex"), new_session = T, clean_envir = T)
file.remove("_main.md") # only when requested
# Deltares report
bookdown::render_book("index.Rmd", output_format = bookdown::pdf_book(template = "deltares-report-template.tex"), new_session = T, clean_envir = T)
file.remove("_main.md") # only when requested
# Deltares report
bookdown::render_book("index.Rmd", output_format = bookdown::pdf_book(template = "deltares-report-template.tex"), new_session = T, clean_envir = T)
file.remove("_main.md") # only when requested
# Deltares report
bookdown::render_book("index.Rmd", output_format = bookdown::pdf_book(template = "deltares-report-template.tex"), new_session = T, clean_envir = T)
file.remove("_main.md") # only when requested
# Deltares report
bookdown::render_book("index.Rmd", output_format = bookdown::pdf_book(template = "deltares-report-template.tex"), new_session = T, clean_envir = T)
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
install.packages("reticulate")
Sys.which("python")
Sys.which("python")
library(reticulate)
Sys.which("python")
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
use_python('c:/OSGeo4W64/apps/Python37/')
use_python('c:/OSGeo4W64/apps/Python37/')
use_python('c:/OSGeo4W64/apps/Python37')
use_python()
use_python('C:/Users/stolte/AppData/Local/Continuum/anaconda3/python.exe')
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
use_python('C:/Users/stolte/AppData/Local/Continuum/anaconda3/python.exe')
use_python('C:/Users/stolte/AppData/Local/Continuum/anaconda3')
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
use_python('C:/Users/stolte/AppData/Local/Continuum/anaconda3')
use_python('C:/Users/stolte/AppData/Local/Continuum/anaconda3')
reticulate::py_versions_windows()
reticulate::py_versions_windows()$install_path[1]
reticulate::py_versions_windows()$install_path[2]
reticulate::py_versions_windows()$install_path[1]
reticulate::py_versions_windows()
reticulate::py_available()
rm(list = ls())
require(rmarkdown)
require(tufte)
require(bookdown)
# convert refs to nicer format
require(RefManageR)
refs <- RefManageR::ReadBib("bibliography/MyBibliography.bib")
RefManageR::WriteBib(refs, file = "bibliography/MyModifiedBibliography", biblatex = T)
# Deltares report
bookdown::render_book("index.Rmd", output_format = bookdown::pdf_book(template = "deltares-report-template.tex"), new_session = T, clean_envir = T)
file.remove("_main.md") # only when requested
# Deltares report
bookdown::render_book("index.Rmd", output_format = bookdown::pdf_book(template = "deltares-report-template.tex"), new_session = T, clean_envir = T)
file.remove("_main.md") # only when requested
# Deltares report
bookdown::render_book("index.Rmd", output_format = bookdown::pdf_book(template = "deltares-report-template.tex"), new_session = T, clean_envir = T)
file.remove("_main.md") # only when requested
# Deltares report
bookdown::render_book("index.Rmd", output_format = bookdown::pdf_book(template = "deltares-report-template.tex"), new_session = T, clean_envir = T)
tinytex::tlmgr_update()
tinytex::usetinytex()
tinytex::use_tinytex()
# then restart R and Rstudio (you may have to close all instances of R/Rstudio)
# check if path is correct:
tinytex::tinytex_root()
rm(list = ls())
require(rmarkdown)
require(tufte)
require(bookdown)
file.remove("_main.md") # only when requested
# Deltares report
bookdown::render_book("index.Rmd", output_format = bookdown::pdf_book(template = "deltares-report-template.tex"), new_session = T, clean_envir = T)
file.remove("_main.md") # only when requested
# Deltares report
bookdown::render_book("index.Rmd", output_format = bookdown::pdf_book(latex_engine = "xelatex", template = "deltares-report-template.tex"), new_session = T, clean_envir = T)
tinytex::install_tinytex()
tinytex::tlmgr_update()
tinytex::use_tinytex()
# then restart R and Rstudio (you may have to close all instances of R/Rstudio)
# check if path is correct:
tinytex::tinytex_root()
# gitbook formatted html pages
file.remove("_main.md") # only when requested
# Deltares report
bookdown::render_book("index.Rmd", output_format = bookdown::pdf_book(latex_engine = "xelatex", template = "deltares-report-template.tex"), new_session = T, clean_envir = T)
# Deltares report
bookdown::render_book("index.Rmd", output_format = bookdown::pdf_book(template = "deltares-report-template.tex"), new_session = T, clean_envir = T)
file.remove("_main.md") # only when requested
# Deltares report
bookdown::render_book("index.Rmd", output_format = bookdown::pdf_book(template = "deltares-report-template.tex"), new_session = T, clean_envir = T)
file.remove("_main.md") # only when requested
file.remove("_main.md") # only when requested
# Deltares report
bookdown::render_book("index.Rmd", output_format = bookdown::pdf_book(template = "deltares-report-template.tex"), new_session = T, clean_envir = T)
# "normal" pdf
options(tinytex.verbose = TRUE) # change to TRUE for debugging
file.remove("_main.md") # only when requested
# Deltares report
bookdown::render_book("index.Rmd", output_format = bookdown::pdf_book(template = "deltares-report-template.tex"), new_session = T, clean_envir = T)
file.remove("_main.md") # only when requested
# Deltares report
bookdown::render_book("index.Rmd", output_format = bookdown::pdf_book(template = "deltares-report-template.tex"), new_session = T, clean_envir = T)
# Deltares report
options(tinytex.verbose = TRUE) # change to TRUE for debugging
bookdown::render_book("index.Rmd", output_format = bookdown::pdf_book(template = "deltares-report-template.tex"), new_session = T, clean_envir = T)
file.remove("_main.md") # only when requested
# Deltares report
options(tinytex.verbose = TRUE) # change to TRUE for debugging
bookdown::render_book("index.Rmd", output_format = bookdown::pdf_book(template = "deltares-report-template.tex"), new_session = T, clean_envir = T)
# set chunk options for this Rmd file
knitr::opts_chunk$set(
echo = FALSE,
message = FALSE,
warning = FALSE,
cache = TRUE
)
require(sf)
require(tidyverse)
baseurl = "https://wad.deontwikkelfabriek.nl/geoserver/sovon/ows?"
wfs_request = "service=WFS&version=1.0.0&request=GetFeature&typeName=sovon:koloniebroedvogels"
koloniebroedvogels <- st_read(paste0(baseurl, wfs_request), crs = 4326) %>% st_transform(28992)
land <- read_sf("d:/GIS_DATA/Nederland/administratief/Gemeentegrenzen_2017_zonder_water_gen.shp") %>% st_transform(28992) %>%
summarise()
rm(list = ls())
require(rmarkdown)
require(tufte)
require(bookdown)
bookdown::render_book("index.Rmd", output_format = bookdown::gitbook(split_by = "chapter"), new_session = T, clean_envir = T)
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
reticulate::py_versions_windows()
use_python('C:/Users/stolte/AppData/Local/Continuum/anaconda3')
reticulate::py_available()
scipy <- import("scipy")
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
reticulate::py_versions_windows()
use_python('C:/Users/stolte/AppData/Local/Continuum/anaconda3')
reticulate::py_available()
scipy <- import("scipy")
bookdown::render_book("index.Rmd", output_format = bookdown::gitbook(split_by = "chapter"), new_session = T, clean_envir = T)
bookdown::render_book("index.Rmd", output_format = bookdown::gitbook(split_by = "chapter"), new_session = T, clean_envir = T)
bookdown::render_book("index.Rmd", output_format = bookdown::gitbook(split_by = "chapter"), new_session = T, clean_envir = T)
bookdown::render_book("index.Rmd", output_format = bookdown::gitbook(split_by = "chapter"), new_session = T, clean_envir = T)
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
reticulate::py_versions_windows()
use_python('C:/Users/stolte/AppData/Local/Continuum/anaconda3')
reticulate::py_available()
reticulate::py_available(TRUE)
bookdown
bookdown::render_book("index.Rmd", output_format = bookdown::gitbook(split_by = "chapter"), new_session = T, clean_envir = T)
packageVersion("knitr")
reticulate::py_versions_windows()
reticulate::py_versions_windows()
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
reticulate::py_versions_windows()
reticulate::py_available(TRUE)
scipy <- import("scipy")
knitr::opts_chunk$set()
library(reticulate)
reticulate::py_versions_windows()
use_python('C:/Users/stolte/AppData/Local/Continuum/anaconda3')
reticulate::py_available(TRUE)
scipy <- import("scipy")
bookdown::render_book("index.Rmd", output_format = bookdown::gitbook(split_by = "chapter"), new_session = T, clean_envir = T)
devtools::install_github("rstudio/reticulate")
devtools::install_github("rstudio/reticulate")
?attach
detach(jsonlite)
detach("jsonlite")
devtools::install_github("rstudio/reticulate")
install.packages("jsonlite")
install.packages("jsonlite")
devtools::install_github("rstudio/reticulate")
require(rmarkdown)
require(tufte)
require(bookdown)
bookdown::render_book("index.Rmd", output_format = bookdown::gitbook(split_by = "chapter"), new_session = T, clean_envir = T)
