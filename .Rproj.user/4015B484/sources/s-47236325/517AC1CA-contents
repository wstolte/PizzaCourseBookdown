
# Use of python as engine


In Rmarkdown, different engines can be used (). To combine Python and R scripts, the R package reticulate will do the hard work to enable interoperability of R an Python code chunks in your Rmarkdown document (https://rstudio.github.io/reticulate/articles/r_markdown.html).

Start a document with an R code block like this:

```{r setup, include=TRUE, eval=FALSE}
knitr::opts_chunk$set()
library(reticulate)
reticulate::py_versions_windows()
use_python('C:/Users/stolte/AppData/Local/Continuum/anaconda3')
reticulate::py_available(TRUE)
scipy <- import("scipy")

```


A chunk with python code:

```{python testPlot, fig.cap = "Testplot for python matplotlib plotting."}

import matplotlib.pyplot as plt
import numpy as np
t = np.arange(0.0, 2.0, 0.01)
s = 1 + np.sin(2*np.pi*t)

plt.plot(t,s)
plt.xlabel('time (s)')
plt.ylabel('voltage (mV)')
plt.grid(True)
plt.savefig("test.png")
plt.show()

```


Note. 

The python code runs fine in console and in Rmarkdown compilaion in editor. It does not yet work to render the document. 
https://github.com/rstudio/rstudio/issues/4182
However, this will aparenlty be solved pretty soon. 


Je kunt nu ook de python objecten in R gebruiken

```{r}
# volgens mij moet je eerst een pandas dataframe maken van vectoren t en s
# dus: maak pandas df met t = t en s = s (ik ben daar niet zo handig in)

```



```{r}
library(ggplot2)
# ggplot(df, aes(t,s)) + geom_path() # zou dan moeten werken
```


